: 
"  ~/.vimrc
" 

" Use Vim settings, rather than Vi settings
set nocompatible

" Source .vimrc file if present in present working directory
set exrc

" Restrict usage of some commands in non-default .vimrc files
set secure

" Load vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

" Plug
call plug#begin()

" Dependencies
" (vim-snipmate)
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim' 
" (vim-orgmode)
Plug 'vim-scripts/utl.vim'
" Plug 'vim-scripts/taglist.vim'
" Plug 'majutsushi/tagbar'
Plug 'tpope/vim-speeddating'
Plug 'chrisbra/NrrwRgn'
" Plug 'mattn/calendar-vim'
Plug 'vim-scripts/SyntaxRange'

" Plugins
Plug 'flazz/vim-colorschemes'
Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'triglav/vim-visual-increment'
Plug 'vimwiki/vimwiki'
Plug 'neomake/neomake'
Plug 'tpope/vim-fugitive'
Plug 'Valloric/YouCompleteMe', {'do': './install.py --all --system-libclang' }
Plug 'lervag/vimtex'
Plug 'jceb/vim-orgmode'
Plug 'octol/vim-cpp-enhanced-highlight'

call plug#end()

" Filetype detection
filetype plugin indent on

" Set leader key
let mapleader=","
let maplocalleader = ","

" Respect modelines
set modeline

" Set font for gvim
if has('gui_running')
	set guifont="Inconsolata Regular":h13
endif

" Folding options
set foldmethod=indent
set nofoldenable

" Automatically read changed files again
set autoread

" Remove delay after pressing <Esc> in insert mode
if !has('nvim')
	set noesckeys
endif

" Highlight search results
set hls is

" Set tex flavor to latex
let g:tex_flavor = 'latex'

" Set nrformats to alpha for visual-increment-plugin
set nrformats=alpha,octal,hex

" Do not create a .viminfo
set viminfo=

" Set hybrid number mode (Relative line numbers + Aboslute number line on
" current line)
set relativenumber
set number

" Autoindent on
set autoindent
" Access colors present in 256 colorspace
let base16colorspace=256

" Colorscheme
syntax on
colorscheme gruvbox
set bg=dark
set t_Co=256
let g:gruvbox_contrast_dark='hard'

" Tab regulations
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Limit text width to 72 characters when writing mail
au BufRead /tmp/mutt-* set tw=72

" Limit text width to 80 characters when editing LaTeX
au BufRead *.tex set tw=80

" Limit text width to 100 characters when editing C++ files
au BufRead *.cpp set tw=100
au BufRead *.h set tw=100

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Guides
" inoremap <Space><Space> <Esc>/<++><Enter>"_4s

"" Neomake

" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 1s; no delay when writing).
call neomake#configure#automake('nrwi', 500)

" Do not open issue list automatically
let g:neomake_open_list = 0

" Setup cpp for neomake
" let g:neomake_cpp_enable_markers=['gcc']
" let g:neomake_cpp_gcc_args = ["-std=c++17", "-Wextra", "-Wall", "-g"]
let g:neomake_cpp_enabled_makers = ['gcc']
let g:neomake_cpp_gcc_args = ['-I/nix/store/p8pr8h05ih3dfzya4kh8yh20dals67jp-SDL2-2.0.5-dev/include/SDL2', '-I/nix/store/vqydw2r33n07q6bav9wyy7cbx6rrdnh8-SDL2_image-2.0.1/include/SDL2', '-I/nix/store/d5lsyjnbmbcw66diry48a4w3vi6rq9kv-SDL2_net-2.0.1/include/SDL2', '-I/nix/store/71p15clwdcwyk2z5gr5pvmvsfj6h9ns7-SDL2_ttf-2.0.14/include/SDL2', '-I/nix/store/4g9c7yixc4y071zb0qsvaixmqsjswdf3-openal-soft-1.17.2/include/AL', '-I/nix/store/yxw0m0d5p30ma5v8yrbx3c0k3wnlj2cq-libogg-1.3.2-dev/include', '-I/nix/store/xypw21nbr91q6kncf5y2xspbcs50lhvr-libvorbis-1.3.5-dev/include', '-I/nix/store/an1f51im28jf90h4d1bv7p9pyzj6zvyc-libpng-apng-1.6.31-dev/include', '-I/nix/store/0wc0m18vr2qivfx29kzs225hpay43mhy-zlib-1.2.11-dev/include', '-c', '-Wall', '-Iinc']
" let g:neomake_logfile = '/tmp/neomake.log'
let g:neomake_place_signs = 1
" let g:neomake_verbose = 3

" Recognise .md files as markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" vimwiki settings
let g:vimwiki_list = [
	\ {
	\  'path': '~/wiki/',
	\  'path_html': '~/wiki/html/',
	\  'syntax': 'markdown',
	\  'ext': '.md',
	\ }
	\ ]

" vimwiki with markdown support
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" Show changes made to the file
command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

" Commentmapping for tcomment plugin
map <leader>c <C-_><C-_>

" YCM settings
let g:ycm_show_diagnostics_ui = 0
let g:ycm_python_binary_path='python3'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

" eclim settings
let g:EclimCompletionMethod = 'omnifunc'
nmap <Leader>jc :JavaCorrect<CR>
nmap <Leader>jj :Java<CR>

" pandoc , markdown
command! -nargs=* RunSilent
      \ | execute ':silent !'.'<args>'
      \ | execute ':redraw!'
" Define functions for compiling (pp) and displaying (pv)
function! CompileMD2PDF()
	:execute 'silent !pandoc --from gfm -o /tmp/vim-pandoc-out.pdf %'
endfunction

function! ViewMD2PDF()
	:execute 'silent !zathura /tmp/vim-pandoc-out.pdf &'
endfunction

autocmd FileType markdown nmap <Leader>pp :call CompileMD2PDF()<CR>
autocmd FileType markdown nmap <Leader>pv :call ViewMD2PDF()<CR>
" Automatically compile markdown files on write
" TODO: Detect filetype markdown instead of relying on file ending with .md
autocmd BufWritePost *.md :silent call CompileMD2PDF()

" vimtex settings
if !exists('g:ycm_semantic_triggers')
	let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

let g:vimtex_view_method = 'zathura'

" Latex
autocmd FileType tex inoremap ;and \wedge
autocmd FileType tex inoremap ;ra \rightarrow
autocmd FileType tex inoremap ;la \leftarrow
autocmd FileType tex inoremap ;lra \leftrightarrow
autocmd FileType tex inoremap ;fa \forall
autocmd FileType tex inoremap ;ex \exists
autocmd FileType tex inoremap ;bigo \mathcal{O}

nmap <Leader>ll :VimtexCompile<CR>
nmap <Leader>lv :VimtexView<CR>

" cpp highlighting
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|o|vdb|aux)$',
  \ }

let g:ctrlp_show_hidden = 1

" Remap default controls for following tags
nnoremap t <C-]>

" <Ctrl-l> redraws the screen and removes any search highlighting
nnoremap <silent> <C-l> :nohl<CR><C-l>

" <Ctrl-s> saves the file
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

" Remap arrow keys to do nothing
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>
